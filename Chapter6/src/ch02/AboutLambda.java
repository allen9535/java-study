package ch02;

public class AboutLambda {

  // 함수형 프로그래밍과 람다식(Lambda Expression)
  // 자바는 객체 지향 프로그래밍으로,
  // 기능을 수행하기 위해 객체를 만들고 그 객체의 내부에 멤버 변수를 선언하며,
  // 기능을 수행하는 메서드를 구현한다.
  // 자바8 부터는 함수형 프로그래밍 방식을 지원하는데 이를 람다식이라 한다.
  // 함수의 구현과 호출만으로 프로그래밍이 수행된다.

  // 함수형 프로그래밍(Functional Programming, FP)
  // 함수형 프로그래밍이란 순수 함수(Pure Function)를 구현하고 호출함으로써
  // 외부의 자료에 부수적인 영향(Side Effect)을 끼치지 않도록 구현하는 방식이다.
  // 함수를 기반으로 하는 프로그래밍이면서 입력 받는 자료 이외의 외부 자료를 사용하지 않아,
  // 여러 자료가 동시에 수행되는 병렬 처리가 가능하다.
  // 함수형 프로그래밍은 함수의 기능이 자료에 독립적임을 보장하는데,
  // 이는 동일한 자료에 대해 동일한 결과를 보장하며 다양한 자료에 대해 같은 기능을 수행할 수 있음을 말한다.
  //
  // 여기서 순수 함수란 매개 변수만을 이용하여 만드는 함수를 말하는데,
  // 함수 내부에서 함수 외부에 존재하는 변수를 사용하지 않음으로써
  // 함수의 수행이 외부에 영향을 미치지 않는 것을 말한다.

  // 두 수를 입력 받아 더하는 add() 함수를 예시로 만들었다.
  int add(int x, int y) {
    return x + y;
  }

  // 람다식 문법
  // (매개 변수) -> {실행문;}
  // add() 함수를 람다식으로 표현하면 다음과 같다.
  // (int x, int y) -> {return x + y;}
  // 매개 변수가 두 개 이상인 경우 괄호를 생략할 수 없다.
  // (x, y) -> {System.out.println(x+y);} // 오류 발생!
  // 매개 변수가 하나인 경우에는 자료형과 괄호를 생략 가능하다.
  // str -> {System.out.println(str);}
  // 실행문이 한 문장이라면 중괄호 생략이 가능하다.
  // str -> System.out.println(str);
  // 실행문이 한 문장이라 하더라도 return문(반환문)은 중괄호를 생략할 수 없다.
  // str -> return str.length(); // 오류 발생!
  // 실행문이 한 문장의 반환문인 경우 return과 중괄호를 모두 생략할 수 있다.
  // (x, y) -> x + y;
  // str -> str.length;

}