package ch01;

public class AboutDataStructure {

  // 자료 구조(Data Structure)
  // 프로그램에서 사용하는 많은 데이터를 메모리 상에서 관리하는 여러 방법들을 말한다.
  // 효율적인 자료 구조는 좋은 성능을 가진 알고리즘의 기반이 된다.
  // 자료의 효율적인 관리는 프로그램의 수행 속도와 밀접환 연관이 있다.
  // 여러 자료 구조들 중 구현하려는 프로그램에 맞는 최적의 자료 구조를 활용해야 하기 때문에,
  // 자료 구조에 대한 이해는 중요하다.

  // 자료 구조의 종류
  // 선형 자료 구조(한 줄로 자료를 관리하는 구조)
  // 배열(Array): 정해진 크기의 메모리를 할당받은 후 사용한다.
  //              자료의 물리적 위치와 논리적 위치가 동일하다.
  // 연결 리스트(Linked List): 자료가 추가될 때 마다 메모리를 할당받고, 자료는 링크로 연결한다.
  //                           자료의 물리적 위치와 논리적 위치가 동일하지 않을 수 있다.
  // 그 외
  // 스택(Stack): 가장 나중에 입력된 자료가 가장 먼저 출력되는 자료 구조.
  //              A, B, C, D의 순서대로 자료가 입력되었을 때 가장 마지막에 입력된 D가 가장 먼저 출력된다.
  //              (Last In First Out, LIFO)
  //              스택에 요소를 추가하는 것을 Push, 요소를 꺼내는 것을 Pop, 가장 마지막에 입력된 요소를 Top이라 한다.
  //              스택에서 pop 하게 되면 가장 마지막 요소를 반환 받으면서, 자료 구조에서는 삭제하게 된다.
  //              세로로 서 있는 막대기를 연상하면 편하다.
  // 큐(Queue): 가장 먼저 입력된 자료가 가장 먼저 출력되는 자료 구조.
  //            A, B, C, D의 순서대로 자료가 입력되었을 때 가장 먼저 입력된 A가 가장 먼저 출력된다.
  //            (First In First Out, FIFO)
  //            큐에 요소를 추가하는 것을 Enqueue, 요소를 꺼내는 것을 Dequeue, 가장 먼저 입력된 요소를 Front, 가장 마지막에 입력된 요소를 Rear라 한다.
  //            큐에서 dequeue 하게 되면 가장 마지막 요소를 반환 받으면서, 자료 구조에서는 삭제하게 된다.
  //            가로로 누워 있는 막대기를 연상하면 편하다.

}